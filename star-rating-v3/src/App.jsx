import { useState } from "react";

export default function App() {
  return (
    <div>
      <h1>Star Rating</h1>
      <StarRating maxRating={5} />
    </div>
  );
}

function StarRating({ maxRating = 5 }) {
  const [currentRating, setCurrentRating] = useState(0);
  const [tempRating, setTempRating] = useState(0);
  function handleRate(i) {
    setCurrentRating(i);
  }
  return (
    <div>
      <div style={{ display: "flex", gap: "5px" }}>
        {Array.from({ length: maxRating }, (_, i) => (
          <Star
            key={i}
            onRate={() => handleRate(i + 1)}
            onHoverIn={() => setTempRating(i + 1)}
            onHoverOut={() => setTempRating(currentRating)}
            full={tempRating ? tempRating >= i + 1 : currentRating >= i + 1}
          />
        ))}
        {tempRating > 0 && <p style={{ paddingLeft: "5px" }}>{tempRating}</p>}
      </div>
    </div>
  );
}

function Star({ onRate, full, onHoverIn, onHoverOut }) {
  return (
    <span
      style={{ cursor: "pointer" }}
      onClick={onRate}
      onMouseEnter={() => onHoverIn()}
      onMouseLeave={() => onHoverOut()}
    >
      {full ? (
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          id="star"
        >
          <path
            fill="#f8b84e"
            d="M-1220 1212.362c-11.656 8.326-86.446-44.452-100.77-44.568-14.324-.115-89.956 51.449-101.476 42.936-11.52-8.513 15.563-95.952 11.247-109.61-4.316-13.658-76.729-69.655-72.193-83.242 4.537-13.587 96.065-14.849 107.721-23.175 11.656-8.325 42.535-94.497 56.86-94.382 14.323.116 43.807 86.775 55.327 95.288 11.52 8.512 103.017 11.252 107.334 24.91 4.316 13.658-68.99 68.479-73.527 82.066-4.536 13.587 21.133 101.451 9.477 109.777z"
            color="#000"
            overflow="visible"
            style={{ marker: "none" }}
            transform="matrix(.04574 0 0 .04561 68.85 -40.34)"
          ></path>
        </svg>
      ) : (
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="16"
          height="16"
          viewBox="0 0 24 24"
          id="star"
        >
          <path
            fill="none"
            fillRule="evenodd"
            stroke="#200E32"
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="1.5"
            d="M10.2135354,0.441329894 L12.5301907,5.09668871 C12.6437709,5.3306716 12.8673229,5.49423715 13.1274534,5.53368599 L18.3127795,6.28282419 C18.5232013,6.31151358 18.713271,6.4218659 18.8407265,6.58934431 C18.9681821,6.75682272 19.0224584,6.9675444 18.9914871,7.17465538 C18.9654336,7.34490401 18.8826605,7.50177662 18.7562018,7.62057098 L15.0006864,11.2592422 C14.8108765,11.4385657 14.7257803,11.7002187 14.7744505,11.9548706 L15.679394,17.0828999 C15.7448774,17.5054355 15.4552147,17.9019154 15.0278347,17.9747311 C14.8516089,18.001936 14.6711642,17.9738576 14.5120169,17.8944663 L9.88775575,15.4776038 C9.65675721,15.3522485 9.37670064,15.3522485 9.1457021,15.4776038 L4.49429266,17.9123029 C4.1040442,18.1096521 3.62530757,17.962958 3.41740993,17.5823254 C3.33635184,17.4288523 3.30778438,17.2536748 3.33596502,17.0828999 L4.24090849,11.9548706 C4.28467865,11.7005405 4.20030563,11.441111 4.01467262,11.2592422 L0.23200891,7.62057098 C-0.0773363034,7.31150312 -0.0773363034,6.81484985 0.23200891,6.50578199 C0.358259148,6.3905834 0.515216648,6.31324177 0.684480646,6.28282419 L5.86980673,5.53368599 C6.12870837,5.49136141 6.35105151,5.32868032 6.46706943,5.09668871 L8.78372471,0.441329894 C8.87526213,0.25256864 9.04026912,0.108236628 9.24131794,0.0410719808 C9.44236677,-0.0260926667 9.66241783,-0.0103975019 9.85155801,0.0845974179 C10.0076083,0.16259069 10.1343954,0.287540724 10.2135354,0.441329894 Z"
            transform="translate(2.5 3)"
          ></path>
        </svg>
      )}
    </span>
  );
}
